// generated by C:\Users\zhang\source\repos\sqlite2cpp.py .\twitters.sql ./twitters Twitter
#ifndef TWITTER_TWITTERS_H
#define TWITTER_TWITTERS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace Twitter
{
  namespace Twitters_
  {
    struct TwitterId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "twitter_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T twitterId;
            T& operator()() { return twitterId; }
            const T& operator()() const { return twitterId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct AuthToken
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "auth_token";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T authToken;
            T& operator()() { return authToken; }
            const T& operator()() const { return authToken; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct MediaIds
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "media_ids";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mediaIds;
            T& operator()() { return mediaIds; }
            const T& operator()() const { return mediaIds; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct CreationAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "creation_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creationAt;
            T& operator()() { return creationAt; }
            const T& operator()() const { return creationAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
  } // namespace Twitters_

  struct Twitters: sqlpp::table_t<Twitters,
               Twitters_::TwitterId,
               Twitters_::UserId,
               Twitters_::AuthToken,
               Twitters_::Status,
               Twitters_::MediaIds,
               Twitters_::CreationAt>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "twitters";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T twitters;
        T& operator()() { return twitters; }
        const T& operator()() const { return twitters; }
      };
    };
  };
} // namespace Twitter
#endif
